1. Write a function exchange to interchange the values of two variables, say x and y. Illustrate the use of this function, in a calling function. Assume that x and y are defined as global variables.

2. Write a function space(x) that can be used to provide a space of x positions between two output numbers. Demonstrate its application.

3. Use recursive function calls to evaluate
```
	f(x) = x - pow(x,3)/3! + pow(x,5)/5! - pow(x,7)/7! + .....
```

4. An n_order polynomial can be evaluated as follows:
```
	P = (.....(((a 0 x+a 1 )x+a 2 )x+a 3 )x+...+a n)
```
Write a function to evaluate the polynomial, using an array variable. Test it using a main program.

5. The Fibonacci numbers are defined recursively as follows:
```
				F1 = 1
				F2 = 1
				Fn = Fn-1 + Fn-2 , n>2
```
Write a function that will generate and print the first n Fibonacci numbers. Test the function for n = 5, 10, and 15.

6. Write a function that will round a floating-point number to an indicated decimal place. For example the number 17.457 would yield the value 17.46 when it is rounded off to two decimal places.

7. Write a function prime that returns 1 if its argument is a prime number and returns zero otherwise.

8. Write a function that will scan a character string passed as an argument and convert all lowercase characters into their uppercase equivalents.

9. Develop a top_down modular program to implement a calculator. The program should request the user to input two numbers and display one of the following as per the desire of the user:
```
(a) Sum of the numbers
(b) Difference of the numbers
(c) Product of the numbers
(d) Division of the numbers
```
Provide separate functions for performing various tasks such as reading, calculating and displaying. Calculating module should call second level modules to perform the individual mathematical operations. The main function should have only function calls.

10. Develop a modular interactive program using functions that reads the values of three sides of a triangle and displays either its area or its perimeter as per the request of the user. Given the three sides a, b and c.
```
		Perimeter = a + b + c
		Area      = sqrt ((s-a)*(s-b)*(s-c))
	where   s 	    - (a+b+c)/2
```

11. Write a function that can be called to find the largest element of an m by n matrix.

12. Write a function that can be called to compute the product of two matrices of size m by n and n by m. The main function provides the values for m and n and two matrices.

13. Design and code an interactive modular program
that will use functions to a matrix of m by n size,
compute column averages and row averages, and
then print the entire matrix with averages shown in
respective rows and columns.

14. Develop a top-down modular program that will perform the following tasks:
```
(a) Read two integer arrays with unsorted elements.
(b) Sort them in ascending order
(c) Merge the sorted arrays
(d) Print the sorted list
```
Use functions for carrying out each of the above tasks. The main function should have only function calls.

15. Develop your own functions for performing following operations on strings:
```
(a) Copying one string to another
(b) Comparing two strings
(c) Adding a string to the end of another string
```
Write a driver program to test your functions.

16. Write a program that invokes a function called
find( ) to perform the following tasks:
```
(a) Receives a character array and a single character.
(b) Returns 1 if the specified character is found in the array, 0 otherwise.
```

17. Design a function locate ( ) that takes two character arrays s1 and s2 and one integer value m as parameters and inserts the string s2 into s1
immediately after the index m .
Write a program to test the function using a real-life situation. (Hint: s2 may be a missing word in s1 that represents a line of text).

18. Write a function that takes an integer parameter m representing the month number of the year and returns the corresponding name of the month. For instance, if m = 3, the month is March. Test your program.

19. In preparing the calendar for a year we need to know whether that particular year is leap year or not. Design a function leap( ) that receives the year as a parameter and returns an appropriate message.
What modifications are required if we want to use the function in preparing the actual calendar?

20. Write a function that receives a floating point value x and returns it as a value rounded to two nearest decimal places. For example, the value
123.4567 will be rounded to 123.46 (Hint: Seek help of one of the math functions available in math library).
